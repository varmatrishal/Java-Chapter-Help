import java.util.Date;/**   This class times the three algorithms given in Figure 4-1.   Timing a program as we have done is not precise, and the results vary    from run to run. However, you should see that Algorithm B is the slowest    and Algorithm C is the fastest.   @author Charles Hoot    @version 4.0 */public class TimedAlgorithms {	public static void algorithmA(long n) 	{		double sum = 0;		for (long i = 1; i <= n; i++)			sum = sum + i;	} // end algorithmA	public static void algorithmB(long n) 	{		double sum = 0;		for (long i = 1; i <= n; i++) 		{			for (long j = 1; j <= i; j++)				sum = sum + 1;		} // end for	} // end algorithmB	public static void algorithmC(long n) 	{		double sum = ((double)n) * (n + 1) / 2;	} // end algorithmC	public static void main(String[] args) 	{		long startTime, stopTime, elapsedTime;		Date current;		System.out.println("Results for different values of n");		System.out.println();		System.out.println("n\t\tA(msec)\tB(msec)\tC(msec)");		for (long i = 2000; i <= 20000; i += 2000) 		{			System.out.print(i + "\t");			// Algorithm A			current = new Date();               // Get current time			startTime = current.getTime();			algorithmA(i);                      // Execute algorithm A			current = new Date();               // Get current time			stopTime = current.getTime();			elapsedTime = stopTime - startTime; // In milliseconds			System.out.print("\t" + elapsedTime);			// Algorithm B			current = new Date();               // Get current time			startTime = current.getTime();			algorithmB(i);                      // Execute algorithm B			current = new Date();               // Get current time			stopTime = current.getTime();			elapsedTime = stopTime - startTime; // In milliseconds			System.out.print("\t" + elapsedTime);			// Algorithm C			current = new Date();               // Get current time			startTime = current.getTime();			algorithmC(i);                      // Execute algorithm C			current = new Date();               // Get current time			stopTime = current.getTime();			elapsedTime = stopTime - startTime; // In milliseconds			System.out.println("\t" + elapsedTime);		} // end for			} // end main} // end TimedAlgorithms/*Results for different values of nn			A(msec)	B(msec)	C(msec)2000		1		15		14000		0		57		06000		1		61		08000		0		110		010000		1		169		012000		1		244		014000		1		332		116000		0		519		018000		0		577		020000		1		594		0 */